Build the typing logic with error handling.
    calculate the speed
Multiple users in one game
    backend apis
        generate guest id's for a race if user_id not provided. - done
        return available to join time in response. -done
        return updated race details in response. -done
        change the status of games when completed.(accept in update) -done
        generate bots for empty games
        Correct the redis modelling for storing and retrieving a race after profiling the app. Currently non-performing hacky code.
            background job to prepare a queue of available races to join - use pub/sub
        An endpoint for user stats.
    hook to frontend
Logic to pull quotes, text, tweets, etc
Facebook/twitter login. Invite friends online - storage in mongo
Styling: website and racing stats.
push to heroku, hook up dns
Hook up with social sites, fb like share, twitter like share
Hook up ads
Fix RVM

Ideas:
Mobile - responsive, phonegap/titanium based app for android/iphone.
chat server
Personalisation
Multiple game formats
Multiple blurbs - twitter, amazon, gists, Idea(VIM) keyboard shorcut practice etc
Camera: to watch eye movement to see if touch typing or watching keyboard.
Multiple language support - spanish, french, hindi etc
    Inspiration from duolingo, recaptcha etc
http://www.seanwrona.com/typeracer/community.php
http://multiplayerblog.mtv.com/2008/05/08/the-story-behind-the-addictive-web-game-typeracer-a-competitive-mavis-beacon/
http://en.wikipedia.org/wiki/TypeRacer
https://gist.github.com/feross/1936829
http://www.nitrotype.com/race/



POC implementations/Learnings/Goals:
  Timer
  Visualisation::
    progress of players in a game, stats etc d3 js
  Profiling code for measuring performance and optimisation::
    Concurrency using threads vs process vs events
    Functional style programming etc
    compression, size/bandwidth related.
    sinatra vs rails vs node.js
    static vs dynamic code analysis.
  Performance Testing::
    apache bench vs locust vs jmeter
    blitz.io
    http://www.mnot.net/blog/2011/05/18/http_benchmark_rules
  Monitoring::
    Alerting on failure etc.
    logging for errors.
  DB stores::
    redis, mongo, mysql? http://www.slideshare.net/juokaz/choosing-the-right-nosql-database-4developers
    Algorithms and Data Structures(Data modelling)
    DB indexing(secondary+composite)
  Deployment(CD):
    capistrano
    AWS
    Puppet
    Vagrant
    DNS, CDN etc
    Shell scripting
    Heroku
  Data Analysis::
      Machine learning::
        Tell users their mistakes from keystrokes typed
      Statistics::
        Users from different countries.
        Log analysis etc
  Service Design::
    Restful services, micor services etc
    API throttling, caching, reverse proxying, web caching etc etc
    Consuming API's from different sources
  Mobile responsive
  Canvas: Create fighter plane type word game. Game development
  WebSockets: pull(http) vs pusher
  Languages::
    Ruby, Javascript expertise
    text manipulation: regex etc
    searching: full-text, NLP etc
  Git Mastery::
  Design::
    SOLID
  Messaging: rabbitmq, zeromq etc, interprocess communication
  Chat servers:
    xmpp






